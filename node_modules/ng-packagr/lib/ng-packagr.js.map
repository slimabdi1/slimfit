{"version":3,"file":"ng-packagr.js","sourceRoot":"","sources":["../../src/lib/ng-packagr.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,6CAAmD;AACnD,0CAAuC;AACvC,sCAAwC;AACxC,uCAA6C;AAG7C,WAAW;AACX,6BAA6B;AAE7B,UAAU;AACV,kCAAkC;AAYlC,yBAAsC,IAA2B;;QAC/D,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAErC,IAAI,kBAA0B,CAAC;QAC/B,IAAI,CAAC;YACH,yEAAyE;YACzE,MAAM,UAAU,GAAwB,MAAM,0BAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAE7E,MAAM,WAAW,GAAkB,UAAU,CAAC,WAAW,CAAC;YAE1D,yEAAyE;YACzE,MAAM,eAAM,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;YAE1C,MAAM,mBAAmB,GAAW,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;YAC9E,kBAAkB,GAAG,WAAW,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC1H,MAAM,0BAAgB,CAAC,WAAW,CAAC,CAAC;YAEpC,GAAG,CAAA,CAAC,MAAM,gBAAgB,IAAI,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC3D,MAAM,0BAAgB,CAAC,gBAAgB,CAAC,CAAC;YAC3C,CAAC;YAED,MAAM,gBAAS,CAAC,GAAG,WAAW,CAAC,UAAU,YAAY,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC;YACpF,MAAM,gBAAS,CAAC,GAAG,WAAW,CAAC,UAAU,UAAU,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC;YAElF,GAAG,CAAC,OAAO,CAAC,8BAA8B,WAAW,CAAC,UAAU,gBAAgB,WAAW,CAAC,eAAe,EAAE,CAAC,CAAC;QACjH,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,uDAAuD;YACvD,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjB,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACvB,MAAM,eAAM,CAAC,kBAAkB,CAAC,CAAC;YACnC,CAAC;QACH,CAAC;IACH,CAAC;CAAA;AAlCD,0CAkCC","sourcesContent":["// BUILD STEP IMPLEMENTATIONS\nimport { discoverPackages } from './steps/package';\nimport { rimraf } from './util/rimraf';\nimport { copyFiles } from './util/copy';\nimport { generateNgBundle } from './bundler';\nimport { PackageSearchResult } from './model/package-search-result';\n\n// Node API\nimport * as path from 'path';\n\n// Logging\nimport * as log from './util/log';\n\n// `ng-package.json` config\nimport { NgPackageData } from './model/ng-package-data';\n\n\n/** CLI arguments passed to `ng-packagr` and `ngPackage()`. */\nexport interface NgPackagrCliArguments {\n  /** Path to the 'ng-package.json' file */\n  project: string\n}\n\nexport async function createNgPackage(opts: NgPackagrCliArguments): Promise<void> {\n  log.info(`Building Angular library`);\n\n  let buildDirectoryRoot: string;\n  try {\n    // READ `ng-package.json` and obtain model, as well as secondary packages\n    const ngPackages: PackageSearchResult = await discoverPackages(opts.project);\n\n    const rootPackage: NgPackageData = ngPackages.rootPackage;\n\n    // clean the root (should clean all secondary module directories as well)\n    await rimraf(rootPackage.destinationPath);\n\n    const packageSpecificPath: string = path.basename(rootPackage.buildDirectory);\n    buildDirectoryRoot = rootPackage.buildDirectory.substring(0, rootPackage.buildDirectory.lastIndexOf(packageSpecificPath));\n    await generateNgBundle(rootPackage);\n\n    for(const secondaryPackage of ngPackages.secondaryPackages) {\n      await generateNgBundle(secondaryPackage);\n    }\n\n    await copyFiles(`${rootPackage.sourcePath}/README.md`, rootPackage.destinationPath);\n    await copyFiles(`${rootPackage.sourcePath}/LICENSE`, rootPackage.destinationPath);\n\n    log.success(`Built Angular library from ${rootPackage.sourcePath}, written to ${rootPackage.destinationPath}`);\n  } catch (error) {\n    // Report error messages and throw the error further up\n    log.error(error);\n    throw error;\n  } finally {\n    if (buildDirectoryRoot) {\n      await rimraf(buildDirectoryRoot);\n    }\n  }\n}\n"]}