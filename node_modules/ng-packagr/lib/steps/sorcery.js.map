{"version":3,"file":"sorcery.js","sourceRoot":"","sources":["../../../src/lib/steps/sorcery.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,mCAAmC;AAEnC,yCAAiD;AACjD,qCAAoC;AAEpC;;;;;GAKG;AACH,wBAAqC,UAAkB;;QACrD,WAAK,CAAC,0BAA0B,UAAU,EAAE,CAAC,CAAC;QAC9C,MAAM,IAAI,GAAQ;YAChB,MAAM,EAAE,KAAK;YACb,cAAc,EAAE,IAAI;SACrB,CAAC;QAEF,gGAAgG;QAChG,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,qCAAqC,GAAG,UAAU,CAAC,CAAC;QACtE,CAAC;QAED,MAAM,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;CAAA;AAdD,wCAcC;AAED;;;;GAIG;AACH,+BAA4C,KAAoB;;QAC9D,MAAM,YAAY,GAAW,KAAK,KAAK,CAAC,eAAe,EAAE,CAAC;QAC1D,MAAM,sBAAe,CAAC,GAAG,KAAK,CAAC,cAAc,cAAc,EAAE,CAAC,SAAc,EAAO,EAAE;YACnF,SAAS,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO;iBAClC,GAAG,CAAC,CAAC,IAAY,EAAU,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;YACtE,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AAPD,sDAOC","sourcesContent":["import * as sorcery from 'sorcery';\nimport { NgPackageData } from './../model/ng-package-data';\nimport { modifyJsonFiles } from './../util/json';\nimport { debug } from '../util/log';\n\n/**\n * Re-maps the source `.map` file for the given `sourceFile`. This keeps source maps intact over\n * a series of transpilations!\n *\n * @param sourceFile Source file\n */\nexport async function remapSourceMap(sourceFile: string): Promise<void> {\n  debug(`re-mapping sources for ${sourceFile}`);\n  const opts: any = {\n    inline: false,\n    includeContent: true,\n  };\n\n  // Once sorcery loads the chain of sourcemaps, the new sourcemap will be written asynchronously.\n  const chain = await sorcery.load(sourceFile);\n  if (!chain) {\n    throw new Error('Failed to load sourceMap chain for ' + sourceFile);\n  }\n\n  await chain.write(opts);\n}\n\n/**\n * Relocates the source `.map` file's relative root file paths to the module's name.\n *\n * @param ngPkg Angular package data\n */\nexport async function relocateSourceMapRoot(ngPkg: NgPackageData): Promise<void> {\n  const replaceValue: string = `~/${ngPkg.fullPackageName}`;\n  await modifyJsonFiles(`${ngPkg.buildDirectory}/**/*.js.map`, (sourceMap: any): any => {\n    sourceMap.sources = sourceMap.sources\n      .map((path: string): string => path.replace('../ts', replaceValue));\n    return sourceMap;\n  });\n}\n"]}