{"version":3,"file":"assets.js","sourceRoot":"","sources":["../../../src/lib/steps/assets.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vfs from 'vinyl-fs';\nimport * as path from 'path';\nimport { debug, warn } from '../util/log';\nimport { readFile } from 'fs-extra';\n\n// Angular Inliner for Templates and Stylesheets\nimport * as inlineNg2Template from 'gulp-inline-ng2-template';\n\n// CSS Tools\nimport * as autoprefixer from 'autoprefixer';\nimport * as browserslist from 'browserslist';\nimport * as postcss from 'postcss';\nimport * as sass from 'node-sass';\nimport * as less from 'less';\nimport * as stylus from 'stylus';\n\n\n/**\n * Process Angular components assets (HTML and Stylesheets).\n *\n * Inlines 'templateUrl' and 'styleUrl', compiles .scss to .css, and write .ts files to\n * destination directory.\n *\n * @param src Source folder\n * @param dest Destination folder\n */\nexport const processAssets = (src: string, dest: string): Promise<any> => {\n\n  return new Promise((resolve, reject) => {\n    debug(`processAssets ${src} to ${dest}`);\n\n    vfs.src([`${src}/**/*.ts`, `${src}/**/*.tsx`, `${src}/**/*.jsx`, '!node_modules/**/*', '!${dest}/**/*'])\n      .pipe(inlineNg2Template({\n        base: `${src}`,\n        useRelativePaths: true,\n        styleProcessor: async (path, ext, file, cb) => {\n\n          debug(`render stylesheet ${path}`);\n          const renderPickTask: Promise<string> = pickRenderer(path, file, src);\n\n          debug(`postcss with autoprefixer for ${path}`);\n          const browsers = browserslist(undefined, { path });\n\n          try {\n            const css: string = await renderPickTask;\n            const result: postcss.Result = await postcss([ autoprefixer({ browsers }) ])\n              .process(css, { from: path, to: path.replace(ext, '.css') });\n            result.warnings().forEach((msg) => {\n              warn(msg.toString());\n            });\n\n            cb(undefined, result.css);\n          } catch (err) {\n            cb(err || new Error(`Cannot inline stylesheet ${path}`));\n          }\n        }\n      }))\n      .on('error', reject)\n      .pipe(vfs.dest(`${dest}`))\n      .on('end', resolve);\n  });\n\n}\n\n\nconst sassImporter = (url: string): any => {\n  if (url[0] === '~') {\n    url = path.resolve('node_modules', url.substr(1));\n  }\n\n  return { file: url };\n}\n\n\nasync function pickRenderer(\n  filePath: string,\n  file: string,\n  srcPath: string): Promise<string> {\n\n  switch (path.extname(filePath)) {\n\n    case '.scss':\n    case '.sass':\n      debug(`rendering sass for ${filePath}`);\n      return await renderSass({ file: filePath, importer: sassImporter });\n\n    case '.less':\n      debug(`rendering less for ${filePath}`);\n      return await renderLess({ filename: filePath });\n\n    case '.styl':\n    case '.stylus':\n      debug(`rendering styl for ${filePath}`);\n      return await renderStylus({ filename: filePath, root: srcPath });\n\n    case '.css':\n    default:\n      return file;\n  }\n\n}\n\n\nconst renderSass = (sassOpts: any): Promise<string> => {\n\n  return new Promise((resolve, reject) => {\n\n    sass.render(sassOpts, (err, result) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result.css.toString());\n      }\n    });\n  });\n}\n\nconst renderLess = (lessOpts: any): Promise<string> => {\n\n  return readFile(lessOpts.filename)\n    .then(buffer => buffer.toString())\n    .then((lessData: string) => new Promise<string>((resolve, reject) => {\n        less.render(lessData || '', lessOpts, (err, result) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result.css.toString());\n        }\n      })\n    }));\n}\n\n/**\n * filename - absolute path to file\n * root - root folder of project (where ng-package.json is located)\n */\nconst renderStylus = ({ filename, root }): Promise<string> => {\n  return readFile(filename)\n    .then(buffer => buffer.toString())\n    .then((stylusData: string) => new Promise<string>((resolve, reject) => {\n      stylus(stylusData)\n        // add paths for resolve\n        .include(root)\n        .include('.')\n        // add support for resolving plugins from node_modules\n        .include('node_modules')\n        .set('filename', filename)\n        // turn on url resolver in stylus, same as flag --resolve-url\n        .set('resolve url', true)\n        .define('url', stylus.resolver())\n        .render((err, css) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(css);\n          }\n        });\n      }));\n}\n"]}