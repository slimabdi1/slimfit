{"version":3,"file":"package.js","sourceRoot":"","sources":["../../../src/lib/steps/package.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAE7B,8DAA+E;AAE/E,uCAA2C;AAC3C,uCAAsE;AACtE,mCAAwC;AACxC,mCAAmC;AAGnC,MAAM,sBAAsB,GAAG,cAAc,CAAC;AAE9C,2EAA2E;AAC3E,yBAAyB,QAAQ,EAAE,QAAQ;IACzC,EAAE,CAAC,CAAC,gBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;AACH,CAAC;AAED,iEAAiE;AACjE,sBAAsB,gBAAwB,EAAE,aAA8B;IAC5E,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QAClB,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YACvB,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;QAC1E,CAAC;QAED,EAAE,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;YACtB,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC;QACxE,CAAC;IACH,CAAC;AACH,CAAC;AAAA,CAAC;AAEF,2BAAiC,QAAgB;;QAE/C,GAAG,CAAC,KAAK,CAAC,qCAAqC,GAAG,QAAQ,CAAC,CAAC;QAC5D,IAAI,CAAC;YACH,MAAM,KAAK,GAAoB,MAAM,mBAAQ,CAAC,QAAQ,CAAC,CAAC;YACxD,GAAG,CAAC,KAAK,CAAC,6BAA6B,GAAG,QAAQ,CAAC,CAAC;YACpD,MAAM,QAAQ,GAAW,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAChD,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC5B,GAAG,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;gBAC9C,wCAAwC;gBACxC,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YACD,MAAM,KAAK,CAAC;QACd,CAAC;IAEH,CAAC;CAAA;AAED,0CAA0C,eAAuB,EAAE,gBAA0B;IAC3F,GAAG,CAAC,CAAC,MAAM,eAAe,IAAI,gBAAgB,CAAC,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AAED,gCAAsC,cAAsB,EAAE,gBAA0B;;QACtF,MAAM,mBAAmB,GAAa,EAAE,CAAC;QACzC,MAAM,iBAAiB,GAAa,MAAM,kBAAO,CAAC,cAAc,CAAC,CAAC;QAClE,GAAG,CAAC,CAAC,MAAM,cAAc,IAAI,iBAAiB,CAAC,CAAC,CAAC;YAC/C,MAAM,QAAQ,GAAW,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;YACtE,MAAM,SAAS,GAAU,MAAM,gBAAK,CAAC,QAAQ,CAAC,CAAC;YAC/C,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,gCAAgC,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBACnG,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrC,CAAC;QACH,CAAC;QAED,MAAM,CAAC,mBAAmB,CAAC;IAC7B,CAAC;CAAA;AAED,mCAAyC,WAA0B;;QACjE,GAAG,CAAC,KAAK,CAAC,qCAAqC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;QAE1E,gFAAgF;QAChF,MAAM,gBAAgB,GAAa;YACjC,cAAc;YACd,MAAM;YACN,WAAW;YACX,sCAAoB;YACpB,WAAW,CAAC,eAAe;SAC5B,CAAC;QACF,MAAM,mBAAmB,GAAa,MAAM,sBAAsB,CAAC,WAAW,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;QAC7G,MAAM,YAAY,GAAa,EAAE,CAAC;QAElC,2CAA2C;QAC3C,OAAM,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACrC,MAAM,eAAe,GAAW,mBAAmB,CAAC,GAAG,EAAE,CAAC;YAC1D,MAAM,iBAAiB,GAAa,MAAM,kBAAO,CAAC,eAAe,CAAC,CAAC;YACnE,IAAI,gBAAgB,GAAG,KAAK,CAAC;YAE7B,2EAA2E;YAC3E,GAAG,CAAC,CAAC,MAAM,cAAc,IAAI,iBAAiB,CAAC,CAAC,CAAC;gBAC/C,MAAM,QAAQ,GAAW,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;gBACvE,2DAA2D;gBAC3D,2GAA2G;gBAC3G,MAAM,SAAS,GAAU,MAAM,gBAAK,CAAC,QAAQ,CAAC,CAAC;gBAC/C,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,gCAAgC,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBACnG,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACrC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;oBACnD,EAAE,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;wBACpD,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAC5B,gBAAgB,GAAG,IAAI,CAAC;wBACxB,iFAAiF;oBACnF,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QAED,GAAG,CAAC,KAAK,CAAC,oCAAoC,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;QAExE,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;CAAA;AAED;;;;;;GAMG;AACH,yBAA+B,QAAgB;;QAE7C,MAAM,GAAG,GAAW,OAAO,CAAC,GAAG,EAAE,CAAC;QAClC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC/B,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAE7C,qCAAqC;QACrC,IAAI,YAAY,GAA6B,iBAAiB,CAAC,QAAQ,CAAC;aACrE,IAAI,CAAC,CAAC,KAA6B,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;QAExD,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;QAChE,EAAE,CAAC,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC7B,sCAAsC;YACtC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,CAAO,KAAsB,EAAE,EAAE;gBAChE,MAAM,UAAU,GAA2B,MAAM,iBAAiB,CAAC,WAAW,CAAC,CAAC;gBAChF,uCAAuC;gBACvC,+BAA+B;gBAC/B,MAAM,CAAC,cAAK,CAAC,KAAK,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;YACnD,CAAC,CAAA,CAAC,CAAC;QACL,CAAC;QAED,MAAM,KAAK,GAAoB,MAAM,YAAY,CAAC;QAClD,mDAAmD;QACnD,MAAM,6BAA6B,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;QAEpF,sBAAsB;QACtB,GAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAElC,MAAM,GAAG,GAAQ,MAAM,mBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,6BAA6B,EAAE,sBAAsB,CAAC,CAAC,CAAC;QACrG,uCAAuC;QACvC,MAAM,kBAAkB,GAAG,cAAK,CAAC,KAAK,EAAE,GAAG,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;QACxE,uDAAuD;QACvD,kBAAkB,CAAC,GAAG,GAAG,kBAAkB,CAAC,GAAG,IAAI,6BAA6B,CAAC;QACjF,kBAAkB,CAAC,IAAI,GAAG,kBAAkB,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,6BAA6B,EAAC,MAAM,CAAC,CAAC;QAExG,MAAM,CAAC,IAAI,+BAAa,CACtB,kBAAkB,CAAC,GAAG,EACtB,GAAG,CAAC,IAAI,EACR,kBAAkB,CAAC,IAAI,EACvB,kBAAkB,CAAC,GAAG,EACtB,kBAAkB,CACnB,CAAC;IACJ,CAAC;CAAA;AAED,8BAAoC,WAA0B,EAAE,QAAgB;;QAC9E,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC7C,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;QACrE,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,sBAAsB,CAAC,CAAC;QAE5E,IAAI,SAAS,GAA2B,MAAM,iBAAiB,CAAC,aAAa,CAAC,CAAC;QAC/E,MAAM,WAAW,GAAQ,MAAM,kBAAW,CAAC,eAAe,CAAC,CAAC;QAE5D,sEAAsE;QACtE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC3C,GAAG,CAAC,KAAK,CAAC,iCAAiC,aAAa,EAAE,CAAC,CAAC;gBAC5D,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QAED,SAAS,GAAG,cAAK,CAAC,SAAS,EAAE,WAAW,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;QACrE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YACnB,SAAS,CAAC,GAAG,GAAG,EAAE,CAAC;QACrB,CAAC;QAED,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC;QAEnD,MAAM,CAAC,IAAI,+BAAa,CACtB,WAAW,CAAC,UAAU,EACtB,WAAW,CAAC,eAAe,EAC3B,WAAW,CAAC,eAAe,EAC3B,aAAa,EACb,SAAS,CACV,CAAC;IACJ,CAAC;CAAA;AAED;;;;;GAKG;AACH,0BAAuC,QAAgB;;QAErD,4GAA4G;QAC5G,MAAM,WAAW,GAAkB,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAC;QAEnE,oGAAoG;QACpG,gFAAgF;QAChF,2FAA2F;QAC3F,uFAAuF;QACvF,MAAM,qBAAqB,GAAa,MAAM,yBAAyB,CAAC,WAAW,CAAC,CAAC;QAErF,MAAM,wBAAwB,GAA6B,qBAAqB;aAC7E,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,WAAW,EAAE,oBAAoB,CAAC,CAAC,CAAC;QAExF,MAAM,0BAA0B,GAA6B,MAAM,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAEzG,+GAA+G;QAC/G,MAAM,iBAAiB,GAAoB,0BAA0B,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvF,MAAM,CAAC;YACL,WAAW;YACX,iBAAiB;SAClB,CAAC;IACJ,CAAC;CAAA;AAvBD,4CAuBC;AAGD;;;;;;GAMG;AACH,sBAAmC,KAAoB,EAAE,gBAA6B;;QAEpF,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAC1B,MAAM,WAAW,GAAQ,MAAM,mBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC,CAAC;QAChG,4BAA4B;QAC5B,GAAG,CAAA,CAAC,MAAM,SAAS,IAAI,gBAAgB,CAAC,CAAC,CAAC;YACxC,WAAW,CAAC,SAAS,CAAC,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;QACvD,CAAC;QAED,WAAW,CAAC,IAAI,GAAG,KAAK,CAAC,eAAe,CAAC;QAEzC,mCAAmC;QACnC,wDAAwD;QACxD,OAAO,WAAW,CAAC,SAAS,CAAC;QAE7B,MAAM,oBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,sBAAsB,CAAC,EAAE,WAAW,CAAC,CAAC;IAC5F,CAAC;CAAA;AAhBD,oCAgBC","sourcesContent":["import * as path from 'path';\nimport { NgPackageConfig } from '../../ng-package.schema';\nimport { NgPackageData, DEFAULT_BUILD_FOLDER } from '../model/ng-package-data';\nimport { NgArtifacts } from '../model/ng-artifacts';\nimport { tryReadJson } from '../util/json';\nimport { readJson, writeJson, readdir, lstat, Stats } from 'fs-extra';\nimport { merge, isArray } from 'lodash';\nimport * as log from '../util/log';\nimport { PackageSearchResult } from '../model/package-search-result';\n\nconst PACKAGE_JSON_FILE_NAME = 'package.json';\n\n// this prevents array objects from getting merged to each other one by one\nfunction arrayMergeLogic(objValue, srcValue) {\n  if (isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n\n// ensures paths are absolute by combining with working directory\nfunction resolvePaths(workingDirectory: string, packageConfig: NgPackageConfig): void {\n  if (packageConfig) {\n    if (packageConfig.dest) {\n      packageConfig.dest = path.resolve(workingDirectory, packageConfig.dest);\n    }\n\n    if (packageConfig.src) {\n      packageConfig.src = path.resolve(workingDirectory, packageConfig.src);\n    }\n  }\n};\n\nasync function readNgPackageFile(filePath: string): Promise<NgPackageConfig | null> {\n\n  log.debug('Searching for ng-package config at ' + filePath);\n  try {\n    const ngPkg: NgPackageConfig = await readJson(filePath);\n    log.debug('Ng-package config found at ' + filePath);\n    const basePath: string = path.dirname(filePath);\n    resolvePaths(basePath, ngPkg);\n    return ngPkg;\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      log.debug('ng-package config file not found');\n      // if the file does not exist, that's ok\n      return null;\n    }\n    throw error;\n  }\n\n}\n\nfunction shouldExcludeFromDirectorySearch(searchDirectory: string, foldersToExclude: string[]) {\n  for (const exclusionFolder of foldersToExclude) {\n    if (exclusionFolder.endsWith(searchDirectory)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nasync function getTopLevelFolderPaths(rootFolderPath: string, foldersToExclude: string[]): Promise<string[]> {\n  const directoriesToSearch: string[] = [];\n  const fileSystemEntries: string[] = await readdir(rootFolderPath);\n  for (const fileSystemPath of fileSystemEntries) {\n    const fullPath: string = path.resolve(rootFolderPath, fileSystemPath);\n    const pathStats: Stats = await lstat(fullPath);\n    if (pathStats.isDirectory() && !shouldExcludeFromDirectorySearch(fileSystemPath, foldersToExclude)) {\n      directoriesToSearch.push(fullPath);\n    }\n  }\n\n  return directoriesToSearch;\n}\n\nasync function findSecondaryPackagePaths(rootPackage: NgPackageData): Promise<string[]> {\n  log.debug('Beginning package search from root ' + rootPackage.sourcePath);\n\n  // Failing to exclude any of these folders will result in the wrong build output\n  const foldersToExclude: string[] = [\n    'node_modules',\n    'dist',\n    '.ng_build', // legacy build folder\n    DEFAULT_BUILD_FOLDER,\n    rootPackage.destinationPath\n  ];\n  const directoriesToSearch: string[] = await getTopLevelFolderPaths(rootPackage.sourcePath, foldersToExclude);\n  const packagePaths: string[] = [];\n\n  // read all directories (without recursion)\n  while(directoriesToSearch.length > 0) {\n    const searchDirectory: string = directoriesToSearch.pop();\n    const fileSystemEntries: string[] = await readdir(searchDirectory);\n    let packageFileFound = false;\n\n    // file system entries might be files, or directories, or named pipes, etc.\n    for (const fileSystemPath of fileSystemEntries) {\n      const fullPath: string = path.resolve(searchDirectory, fileSystemPath);\n      // discover the type of file system entry by using `lstat`.\n      // NOTE: `lstat` is used instead of `stat` in order to prevent failures during resolution of symbolic links\n      const pathStats: Stats = await lstat(fullPath);\n      if (pathStats.isDirectory() && !shouldExcludeFromDirectorySearch(fileSystemPath, foldersToExclude)) {\n        directoriesToSearch.push(fullPath);\n      } else if (!packageFileFound && pathStats.isFile()) {\n        if (fileSystemPath.endsWith(PACKAGE_JSON_FILE_NAME)) {\n          packagePaths.push(fullPath);\n          packageFileFound = true;\n          // we can't `break` here because doing so might cause us to miss some directories\n        }\n      }\n    }\n  }\n\n  log.debug('Resolved secondary package paths: ' + packagePaths.join(','))\n\n  return packagePaths;\n}\n\n/**\n * Reads an Angular package definition first from the passed in file path,\n * then from the default ng-package.json file,\n * then from package.json, and merges the json into one config object.\n *\n * @param filePath path pointing to `ng-package.json` file\n */\nasync function readRootPackage(filePath: string): Promise<NgPackageData> {\n\n  const cwd: string = process.cwd();\n  if (!path.isAbsolute(filePath)) {\n    filePath = path.resolve(cwd, filePath);\n  }\n\n  const baseDirectory = path.dirname(filePath);\n\n  // read custom ng-package config file\n  let promiseChain: Promise<NgPackageConfig> = readNgPackageFile(filePath)\n    .then((ngPkg: NgPackageConfig | null) => ngPkg || {});\n\n  const defaultPath = path.join(baseDirectory, 'ng-package.json');\n  if (defaultPath !== filePath) {\n    // read default ng-package config file\n    promiseChain = promiseChain.then(async (ngPkg: NgPackageConfig) => {\n      const otherNgPkg: NgPackageConfig | null = await readNgPackageFile(defaultPath);\n      // merge both ng-package config objects\n      // merge will never return null\n      return merge(ngPkg, otherNgPkg, arrayMergeLogic);\n    });\n  }\n\n  const ngPkg: NgPackageConfig = await promiseChain;\n  // resolve paths relative to `ng-package.json` file\n  const packageConfigurationDirectory = path.resolve(baseDirectory, ngPkg.src || '.');\n\n  // read 'package.json'\n  log.debug('loading package.json');\n\n  const pkg: any = await readJson(path.resolve(packageConfigurationDirectory, PACKAGE_JSON_FILE_NAME));\n  // merge package.json ng-package config\n  const finalPackageConfig = merge(ngPkg, pkg.ngPackage, arrayMergeLogic);\n  // make sure we provide default values for src and dest\n  finalPackageConfig.src = finalPackageConfig.src || packageConfigurationDirectory;\n  finalPackageConfig.dest = finalPackageConfig.dest || path.resolve(packageConfigurationDirectory,'dist');\n\n  return new NgPackageData(\n    finalPackageConfig.src,\n    pkg.name,\n    finalPackageConfig.dest,\n    finalPackageConfig.src,\n    finalPackageConfig\n  );\n}\n\nasync function readSecondaryPackage(rootPackage: NgPackageData, filePath: string): Promise<NgPackageData | null> {\n  const baseDirectory = path.dirname(filePath);\n  const ngPackageFile = path.resolve(baseDirectory, 'ng-package.json');\n  const packageJsonFile = path.resolve(baseDirectory, PACKAGE_JSON_FILE_NAME);\n\n  let ngPackage: NgPackageConfig | null = await readNgPackageFile(ngPackageFile);\n  const packageJson: any = await tryReadJson(packageJsonFile);\n\n  // if we don't detect any explicit package configurations, then ignore\n  if (!ngPackage) {\n    if (!packageJson || !packageJson.ngPackage) {\n      log.debug(`No secondary package found in ${baseDirectory}`);\n      return null;\n    }\n  }\n\n  ngPackage = merge(ngPackage, packageJson.ngPackage, arrayMergeLogic);\n  if (!ngPackage.lib) {\n    ngPackage.lib = {};\n  }\n\n  ngPackage.lib.externals = rootPackage.libExternals;\n\n  return new NgPackageData(\n    rootPackage.sourcePath,\n    rootPackage.fullPackageName,\n    rootPackage.destinationPath,\n    baseDirectory,\n    ngPackage\n  );\n}\n\n/**\n * Search for, and read, root and secondary packages starting from a root path.\n *\n * @param {string} rootPath The path to your root folder which contains a package.json file\n * @returns {Promise<PackageSearchResult>}\n */\nexport async function discoverPackages(rootPath: string): Promise<PackageSearchResult> {\n\n  // the root package gets read a bit differently than secondary packages because it must guarantee full paths\n  const rootPackage: NgPackageData = await readRootPackage(rootPath);\n\n  // With the metadata from the root package, we can proceed to read secondary packages in sub folders\n  // This assumes that all secondary packages exist in sub paths of the root path.\n  // Without such an assumption, automatic secondary package discovery would not be feasible.\n  // Specifically, the function is looking for `ng-package.json` or `package.json` files.\n  const secondaryPackagePaths: string[] = await findSecondaryPackagePaths(rootPackage);\n\n  const secondaryPackagePromises: Promise<NgPackageData>[] = secondaryPackagePaths\n    .map(secondaryPackagePath => readSecondaryPackage(rootPackage, secondaryPackagePath));\n\n  const secondaryPackagesFromPaths: (NgPackageData | null)[] = await Promise.all(secondaryPackagePromises);\n\n  // The packages that are null should be excluded because they were not explicitly meant to be secondary entries\n  const secondaryPackages: NgPackageData[] = secondaryPackagesFromPaths.filter(x => !!x);\n\n  return {\n    rootPackage,\n    secondaryPackages\n  };\n}\n\n\n/**\n * Creates a `package.json` file by reading one from the `src` folder, adding additional\n * properties, and writing to `dest` folder\n *\n * @param ngPkg Angular package data\n * @param packageArtifacts Package artifacts to merge into package.json\n */\nexport async function writePackage(ngPkg: NgPackageData, packageArtifacts: NgArtifacts): Promise<void> {\n\n  log.debug('writePackage');\n  const packageJson: any = await readJson(path.resolve(ngPkg.sourcePath, PACKAGE_JSON_FILE_NAME));\n  // set additional properties\n  for(const fieldName in packageArtifacts) {\n    packageJson[fieldName] = packageArtifacts[fieldName];\n  }\n\n  packageJson.name = ngPkg.fullPackageName;\n\n  // keep the dist package.json clean\n  // this will not throw if ngPackage field does not exist\n  delete packageJson.ngPackage;\n\n  await writeJson(path.resolve(ngPkg.destinationPath, PACKAGE_JSON_FILE_NAME), packageJson);\n}\n"]}