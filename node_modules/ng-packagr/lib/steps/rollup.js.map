{"version":3,"file":"rollup.js","sourceRoot":"","sources":["../../../src/lib/steps/rollup.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,mCAAoC;AACpC,0DAA0D;AAC1D,mDAAmD;AACnD,qCAAoC;AACpC,2DAAwD;AAUxD;;;;GAIG;AACH,gBAA6B,IAAmB;;QAE9C,MAAM,OAAO,qBAER,+BAAc,EAEd,IAAI,CAAC,SAAS,CAClB,CAAC;QAEF,IAAI,aAAa,GAAG;YAClB,OAAO,EAAE,MAAM;YACf,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YAC9B,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,EAAE;gBACP,WAAW,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;gBAC3C,QAAQ,EAAE;aACX;YACD,MAAM,EAAE,CAAC,OAAO,EAAE,EAAE;gBAClB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,mBAAmB,CAAC,CAAC,CAAC;oBACzC,MAAM,CAAC;gBACT,CAAC;gBAED,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAChC,CAAC;SACF,CAAC;QAEF,MAAM,YAAY,GAAG;YACnB,4FAA4F;YAC5F,QAAQ,EAAE,EAAE;YACZ,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;YAC1B,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,EAAE;YACV,OAAO,EAAE,OAAO;YAChB,SAAS,EAAE,IAAI;SAChB,CAAC;QAEF,WAAK,CAAC,UAAU,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAE/D,MAAM,MAAM,GAAQ,MAAM,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACzD,MAAM,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IACnC,CAAC;CAAA;AAzCD,wBAyCC","sourcesContent":["import * as  __rollup from 'rollup';\nimport * as nodeResolve from 'rollup-plugin-node-resolve';\nimport * as commonJs from 'rollup-plugin-commonjs';\nimport { debug } from '../util/log';\nimport { ROLLUP_GLOBALS } from '../conf/rollup.globals';\n\nexport interface RollupOptions {\n  moduleName: string,\n  entry: string,\n  format: string,\n  dest: string,\n  externals: Object,\n}\n\n/**\n * Runs rollup over the given entry file, bundling it up.\n *\n * @param opts\n */\nexport async function rollup(opts: RollupOptions): Promise<void> {\n\n  const globals = {\n    // default externals for '@angular/*' and 'rxjs'\n    ...ROLLUP_GLOBALS,\n    // external symbols passed from the user's ng-package.json\n    ...opts.externals,\n  };\n\n  let bundleOptions = {\n    context: 'this',\n    external: Object.keys(globals),\n    input: opts.entry,\n    plugins: [\n      nodeResolve({ jsnext: true, module: true }),\n      commonJs(),\n    ],\n    onwarn: (warning) => {\n      if (warning.code === 'THIS_IS_UNDEFINED') {\n        return;\n      }\n\n      console.warn(warning.message);\n    }\n  };\n\n  const writeOptions = {\n    // Keep the moduleId empty because we don't want to force developers to a specific moduleId.\n    moduleId: '',\n    name: `${opts.moduleName}`,\n    file: opts.dest,\n    format: opts.format,\n    banner: '',\n    globals: globals,\n    sourcemap: true\n  };\n\n  debug(`rollup ${opts.entry} to ${opts.dest} (${opts.format})`);\n\n  const bundle: any = await __rollup.rollup(bundleOptions);\n  await bundle.write(writeOptions);\n}\n"]}