"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const tsc_wrapped_1 = require("@angular/tsc-wrapped");
const fs_extra_1 = require("fs-extra");
const log_1 = require("../util/log");
function prepareTsConfig(ngPkg, outFile) {
    return __awaiter(this, void 0, void 0, function* () {
        const tsConfigPath = path.resolve(__dirname, '..', 'conf', 'tsconfig.ngc.json');
        log_1.debug('prepareTsConfig: Resolved tsconfig path to ' + tsConfigPath);
        const tsConfig = yield fs_extra_1.readJson(tsConfigPath);
        const compilerOptions = tsConfig.angularCompilerOptions;
        compilerOptions.flatModuleId = ngPkg.fullPackageName;
        compilerOptions.flatModuleOutFile = `${ngPkg.flatModuleFileName}.js`;
        tsConfig['files'] = [ngPkg.entryFile];
        if (ngPkg.jsxConfig) {
            log_1.debug('prepareTsConfig: Applying jsx flag to tsconfig ' + ngPkg.jsxConfig);
            tsConfig['compilerOptions']['jsx'] = ngPkg.jsxConfig;
        }
        if (ngPkg.languageLevel) {
            tsConfig.compilerOptions.lib = ngPkg.languageLevel;
        }
        yield fs_extra_1.writeJson(outFile, tsConfig);
    });
}
/**
 * Compiles typescript sources with 'ngc'.
 *
 * @param ngPkg Angular package data
 * @param basePath
 */
function ngc(ngPkg, basePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const tsConfigPath = `${basePath}/tsconfig.lib.json`;
        log_1.debug(`ngc ${tsConfigPath}, { basePath: ${basePath} })`);
        yield prepareTsConfig(ngPkg, tsConfigPath);
        yield tsc_wrapped_1.main(tsConfigPath, { basePath });
        log_1.debug('Reading tsconfig from ' + tsConfigPath);
        const tsConfig = yield fs_extra_1.readJson(tsConfigPath);
        return `${basePath}/${tsConfig.compilerOptions.outDir}/${tsConfig.angularCompilerOptions.flatModuleOutFile}`;
    });
}
exports.ngc = ngc;
//# sourceMappingURL=ngc.js.map