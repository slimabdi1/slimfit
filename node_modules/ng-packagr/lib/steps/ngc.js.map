{"version":3,"file":"ngc.js","sourceRoot":"","sources":["../../../src/lib/steps/ngc.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,sDAA2E;AAE3E,uCAA+C;AAC/C,qCAAoC;AAGpC,yBAA+B,KAAoB,EAAE,OAAe;;QAClE,MAAM,YAAY,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,mBAAmB,CAAC,CAAC;QACxF,WAAK,CAAC,6CAA6C,GAAG,YAAY,CAAC,CAAC;QAEpE,MAAM,QAAQ,GAAQ,MAAM,mBAAQ,CAAC,YAAY,CAAC,CAAC;QAEnD,MAAM,eAAe,GAA2B,QAAQ,CAAC,sBAAsB,CAAC;QAChF,eAAe,CAAC,YAAY,GAAG,KAAK,CAAC,eAAe,CAAC;QACrD,eAAe,CAAC,iBAAiB,GAAG,GAAG,KAAK,CAAC,kBAAkB,KAAK,CAAC;QAErE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAE,KAAK,CAAC,SAAS,CAAE,CAAC;QAExC,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;YACpB,WAAK,CAAC,iDAAiD,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;YAC3E,QAAQ,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC;QACvD,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;YACxB,QAAQ,CAAC,eAAe,CAAC,GAAG,GAAG,KAAK,CAAC,aAAa,CAAC;QACrD,CAAC;QAED,MAAM,oBAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;CAAA;AAGD;;;;;GAKG;AACH,aAA0B,KAAoB,EAAE,QAAgB;;QAC9D,MAAM,YAAY,GAAW,GAAG,QAAQ,oBAAoB,CAAC;QAC7D,WAAK,CAAC,OAAO,YAAY,iBAAiB,QAAQ,KAAK,CAAC,CAAC;QAEzD,MAAM,eAAe,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAC3C,MAAM,kBAAG,CAAC,YAAY,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;QAEtC,WAAK,CAAC,wBAAwB,GAAG,YAAY,CAAC,CAAC;QAC/C,MAAM,QAAQ,GAAG,MAAM,mBAAQ,CAAC,YAAY,CAAC,CAAC;QAE9C,MAAM,CAAC,GAAG,QAAQ,IAAI,QAAQ,CAAC,eAAe,CAAC,MAAM,IAAI,QAAQ,CAAC,sBAAsB,CAAC,iBAAiB,EAAE,CAAC;IAC/G,CAAC;CAAA;AAXD,kBAWC","sourcesContent":["import * as path from 'path';\nimport { main as tsc, AngularCompilerOptions } from '@angular/tsc-wrapped';\nimport { NgPackageData } from '../model/ng-package-data';\nimport { readJson, writeJson } from 'fs-extra';\nimport { debug } from '../util/log';\n\n\nasync function prepareTsConfig(ngPkg: NgPackageData, outFile: string): Promise<void> {\n  const tsConfigPath: string = path.resolve(__dirname, '..', 'conf', 'tsconfig.ngc.json');\n  debug('prepareTsConfig: Resolved tsconfig path to ' + tsConfigPath);\n\n  const tsConfig: any = await readJson(tsConfigPath);\n\n  const compilerOptions: AngularCompilerOptions = tsConfig.angularCompilerOptions;\n  compilerOptions.flatModuleId = ngPkg.fullPackageName;\n  compilerOptions.flatModuleOutFile = `${ngPkg.flatModuleFileName}.js`;\n\n  tsConfig['files'] = [ ngPkg.entryFile ];\n\n  if (ngPkg.jsxConfig) {\n    debug('prepareTsConfig: Applying jsx flag to tsconfig ' + ngPkg.jsxConfig);\n    tsConfig['compilerOptions']['jsx'] = ngPkg.jsxConfig;\n  }\n\n  if (ngPkg.languageLevel) {\n    tsConfig.compilerOptions.lib = ngPkg.languageLevel;\n  }\n\n  await writeJson(outFile, tsConfig);\n}\n\n\n/**\n * Compiles typescript sources with 'ngc'.\n *\n * @param ngPkg Angular package data\n * @param basePath\n */\nexport async function ngc(ngPkg: NgPackageData, basePath: string): Promise<string> {\n  const tsConfigPath: string = `${basePath}/tsconfig.lib.json`;\n  debug(`ngc ${tsConfigPath}, { basePath: ${basePath} })`);\n\n  await prepareTsConfig(ngPkg, tsConfigPath);\n  await tsc(tsConfigPath, { basePath });\n\n  debug('Reading tsconfig from ' + tsConfigPath);\n  const tsConfig = await readJson(tsConfigPath);\n\n  return `${basePath}/${tsConfig.compilerOptions.outDir}/${tsConfig.angularCompilerOptions.flatModuleOutFile}`;\n}\n"]}