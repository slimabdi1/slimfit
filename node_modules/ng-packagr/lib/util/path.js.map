{"version":3,"file":"path.js","sourceRoot":"","sources":["../../../src/lib/util/path.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAEjC,4EAA4E;AAC/D,QAAA,IAAI,qBACZ,QAAQ,IACX,cAAc,EAAE,CAAC,IAAa,EAAiB,EAAE;QAC/C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,2FAA2F;QAC3F,iEAAiE;QACjE,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACzD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC,IACD","sourcesContent":["import * as nodePath from 'path';\n\n// by exporting this way, we can add custom functions and still be type safe\nexport const path = {\n  ...nodePath,\n  ensureUnixPath: (path?: string): string | null => {\n    if (!path) {\n      return null;\n    }\n\n    // we use a regex instead of the character literal due to a bug in some versions of node.js\n    // the path separator needs to be preceded by an escape character\n    const regex = new RegExp('\\\\' + nodePath.win32.sep, 'g');\n    return path.replace(regex, nodePath.posix.sep);\n  }\n};\n"]}