"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ng_artifacts_factory_1 = require("./model/ng-artifacts-factory");
const package_1 = require("./steps/package");
const assets_1 = require("./steps/assets");
const ngc_1 = require("./steps/ngc");
const uglify_1 = require("./steps/uglify");
const sorcery_1 = require("./steps/sorcery");
const rollup_1 = require("./steps/rollup");
const tsc_1 = require("./steps/tsc");
const transfer_1 = require("./steps/transfer");
const rimraf_1 = require("./util/rimraf");
const log = require("./util/log");
/**
 * Main Angular bundling processing.
 *
 * @param ngPkg Parent Angular package.
 */
function generateNgBundle(ngPkg) {
    return __awaiter(this, void 0, void 0, function* () {
        log.info(`Generating bundle for ${ngPkg.fullPackageName}`);
        const artifactFactory = new ng_artifacts_factory_1.NgArtifactsFactory();
        const baseBuildPath = `${ngPkg.buildDirectory}/ts${ngPkg.pathOffsetFromSourceRoot}`;
        const artifactPaths = artifactFactory.calculateArtifactPathsForBuild(ngPkg);
        // 0. CLEAN BUILD DIRECTORY
        log.info('Cleaning bundle build directory');
        yield rimraf_1.rimraf(ngPkg.buildDirectory);
        // 1. ASSETS
        log.info('Processing assets');
        yield assets_1.processAssets(ngPkg.sourcePath, baseBuildPath);
        // 2. NGC
        log.info('Running ngc');
        const es2015EntryFile = yield ngc_1.ngc(ngPkg, baseBuildPath);
        // XX: see #46 - ngc only references to closure-annotated ES6 sources
        yield sorcery_1.remapSourceMap(`${baseBuildPath}/${ngPkg.flatModuleFileName}.js`);
        // 3. FESM15: ROLLUP
        log.info('Compiling to FESM15');
        yield rollup_1.rollup({
            moduleName: ngPkg.packageNameWithoutScope,
            entry: es2015EntryFile,
            format: 'es',
            dest: artifactPaths.es2015,
            externals: ngPkg.libExternals
        });
        yield sorcery_1.remapSourceMap(artifactPaths.es2015);
        // 4. FESM5: TSC
        log.info('Compiling to FESM5');
        yield tsc_1.downlevelWithTsc(artifactPaths.es2015, artifactPaths.module);
        yield sorcery_1.remapSourceMap(artifactPaths.module);
        // 5. UMD: ROLLUP
        log.info('Compiling to UMD');
        yield rollup_1.rollup({
            moduleName: ngPkg.packageNameWithoutScope,
            entry: artifactPaths.module,
            format: 'umd',
            dest: artifactPaths.main,
            externals: ngPkg.libExternals
        });
        yield sorcery_1.remapSourceMap(artifactPaths.main);
        // 6. UMD: Minify
        log.info('Minifying UMD bundle');
        const minifiedFilePath = yield uglify_1.minifyJsFile(artifactPaths.main);
        yield sorcery_1.remapSourceMap(minifiedFilePath);
        // 7. SOURCEMAPS: RELOCATE ROOT PATHS
        log.info('Remapping source maps');
        yield sorcery_1.relocateSourceMapRoot(ngPkg);
        // 8. COPY SOURCE FILES TO DESTINATION
        log.info('Copying staged files');
        yield transfer_1.copySourceFilesToDestination(ngPkg, baseBuildPath);
        // 9. WRITE PACKAGE.JSON and OTHER DOC FILES
        log.info('Writing package metadata');
        const packageJsonArtifactPaths = artifactFactory.calculateArtifactPathsForPackageJson(ngPkg);
        yield package_1.writePackage(ngPkg, packageJsonArtifactPaths);
        log.success(`Built Angular bundle for ${ngPkg.fullPackageName}`);
    });
}
exports.generateNgBundle = generateNgBundle;
//# sourceMappingURL=bundler.js.map