"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// BUILD STEP IMPLEMENTATIONS
const package_1 = require("./steps/package");
const rimraf_1 = require("./util/rimraf");
const copy_1 = require("./util/copy");
const bundler_1 = require("./bundler");
// Node API
const path = require("path");
// Logging
const log = require("./util/log");
function createNgPackage(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        log.info(`Building Angular library`);
        let buildDirectoryRoot;
        try {
            // READ `ng-package.json` and obtain model, as well as secondary packages
            const ngPackages = yield package_1.discoverPackages(opts.project);
            const rootPackage = ngPackages.rootPackage;
            // clean the root (should clean all secondary module directories as well)
            yield rimraf_1.rimraf(rootPackage.destinationPath);
            const packageSpecificPath = path.basename(rootPackage.buildDirectory);
            buildDirectoryRoot = rootPackage.buildDirectory.substring(0, rootPackage.buildDirectory.lastIndexOf(packageSpecificPath));
            yield bundler_1.generateNgBundle(rootPackage);
            for (const secondaryPackage of ngPackages.secondaryPackages) {
                yield bundler_1.generateNgBundle(secondaryPackage);
            }
            yield copy_1.copyFiles(`${rootPackage.sourcePath}/README.md`, rootPackage.destinationPath);
            yield copy_1.copyFiles(`${rootPackage.sourcePath}/LICENSE`, rootPackage.destinationPath);
            log.success(`Built Angular library from ${rootPackage.sourcePath}, written to ${rootPackage.destinationPath}`);
        }
        catch (error) {
            // Report error messages and throw the error further up
            log.error(error);
            throw error;
        }
        finally {
            if (buildDirectoryRoot) {
                yield rimraf_1.rimraf(buildDirectoryRoot);
            }
        }
    });
}
exports.createNgPackage = createNgPackage;
//# sourceMappingURL=ng-packagr.js.map