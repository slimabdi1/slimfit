import { AfterViewInit, EventEmitter, OnDestroy } from '@angular/core';
import { WebcamInitError } from "../domain/webcam-init-error";
import { WebcamImage } from "../domain/webcam-image";
import { Observable } from "rxjs";
import { WebcamMirrorProperties } from "../domain/webcam-mirror-properties";
export declare class WebcamComponent implements AfterViewInit, OnDestroy {
    private static DEFAULT_VIDEO_OPTIONS;
    /** Defines the max width of the webcam area in px */
    width: number;
    /** Defines the max height of the webcam area in px */
    height: number;
    /** If the Observable represented by this subscription emits, an image will be captured and emitted through
     * the 'imageCapture' EventEmitter */
    private triggerSubscription;
    /** Defines base constraints to apply when requesting video track from UserMedia */
    videoOptions: MediaTrackConstraints;
    /** Flag to enable/disable camera switch. If enabled, a switch icon will be displayed if multiple cameras were found */
    allowCameraSwitch: boolean;
    /** Parameter to control image mirroring (i.e. for user-facing camera). ["auto", "always", "never"] */
    mirrorImage: string | WebcamMirrorProperties;
    /** Subscription to switchCamera events */
    private switchCameraSubscription;
    /** MediaStream object in use for streaming UserMedia data */
    private mediaStream;
    /** available video devices */
    availableVideoInputs: MediaDeviceInfo[];
    /** Index of active video in availableVideoInputs */
    private activeVideoInputIndex;
    /** Indicates whether the video device is ready to be switched */
    videoInitialized: boolean;
    /** EventEmitter which fires when an image has been captured */
    imageCapture: EventEmitter<WebcamImage>;
    /** Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions) */
    initError: EventEmitter<WebcamInitError>;
    /** Emits when the webcam video was clicked */
    imageClick: EventEmitter<void>;
    /** Emits the active deviceId after the active video device was switched */
    cameraSwitched: EventEmitter<string>;
    private video;
    private canvas;
    private activeVideoSettings;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * If the given Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter
     */
    trigger: Observable<void>;
    switchCamera: Observable<boolean | string>;
    /**
     * Get MediaTrackConstraints to request streaming the given device
     * @param {string} deviceId
     * @param baseMediaTrackConstraints base constraints to merge deviceId-constraint into
     * @returns {MediaTrackConstraints}
     */
    private static getMediaConstraintsForDevice(deviceId, baseMediaTrackConstraints);
    /**
     * Tries to harvest the deviceId from the given mediaStreamTrack object.
     * Browsers populate this object differently; this method tries some different approaches
     * to read the id.
     * @param {MediaStreamTrack} mediaStreamTrack
     * @returns {string} deviceId if found in the mediaStreamTrack
     */
    private static getDeviceIdFromMediaStreamTrack(mediaStreamTrack);
    /**
     * Tries to harvest the facingMode from the given mediaStreamTrack object.
     * Browsers populate this object differently; this method tries some different approaches
     * to read the value.
     * @param {MediaStreamTrack} mediaStreamTrack
     * @returns {string} facingMode if found in the mediaStreamTrack
     */
    private static getFacingModeFromMediaStreamTrack(mediaStreamTrack);
    /**
     * Determines whether the given mediaStreamTrack claims itself as user facing
     * @param mediaStreamTrack
     */
    private static isUserFacing(mediaStreamTrack);
    /**
     * Extracts the value from the given ConstrainDOMString
     * @param constrainDOMString
     */
    private static getValueFromConstrainDOMString(constrainDOMString);
    /**
     * Takes a snapshot of the current webcam's view and emits the image as an event
     */
    takeSnapshot(): void;
    /**
     * Switches to the next/previous video device
     * @param {boolean} forward
     */
    rotateVideoInput(forward: boolean): void;
    /**
     * Switches the camera-view to the specified video device
     */
    switchToVideoInput(deviceId: string): void;
    readonly videoWidth: number;
    readonly videoHeight: number;
    readonly videoStyleClasses: string;
    /**
     * Return the video aspect ratio from the given mediaTrackSettings, if possible;
     * Otherwise, calculate given the width/height parameters only
     * @param {MediaTrackSettings} mediaTrackSettings
     */
    private getVideoAspectRatio(mediaTrackSettings);
    /**
     * Init webcam live view
     */
    private initWebcam(deviceId, userVideoTrackConstraints);
    private getActiveVideoTrack();
    private isMirrorImage();
    /**
     * Stops all active media tracks.
     * This prevents the webcam from being indicated as active,
     * even if it is no longer used by this component.
     */
    private stopMediaTracks();
    /**
     * Unsubscribe from all open subscriptions
     */
    private unsubscribeFromSubscriptions();
    /**
     * Reads available input devices
     */
    private detectAvailableDevices();
}
